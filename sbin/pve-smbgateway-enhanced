#!/usr/bin/env perl

# PVE SMB Gateway Enhanced CLI Tool
# Copyright (C) 2025 Eric Henderson <eric@gozippy.com>
# Dual-licensed under AGPL-3.0 and Commercial License
#
# Enhanced command-line interface with structured output and batch operations

use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray);
use Pod::Usage qw(pod2usage);
use JSON::PP;
use POSIX qw(strftime);
use PVE::SMBGateway::API;
use PVE::SMBGateway::CLI;

# -------- main execution --------
sub main {
    my @args = @ARGV;
    
    # Parse global options
    my $help = 0;
    my $version = 0;
    my $json = 0;
    my $verbose = 0;
    my $config_file = '';
    
    GetOptionsFromArray(\@args,
        'help|h' => \$help,
        'version|v' => \$version,
        'json|j' => \$json,
        'verbose' => \$verbose,
        'config=s' => \$config_file
    );
    
    if ($help) {
        pod2usage(1);
    }
    
    if ($version) {
        print "PVE SMB Gateway Enhanced CLI v1.0.0\n";
        exit 0;
    }
    
    # Get command
    my $command = shift @args;
    
    unless ($command) {
        print "Error: No command specified\n";
        print "Use 'pve-smbgateway-enhanced help' for usage information\n";
        exit 1;
    }
    
    # Handle help command
    if ($command eq 'help') {
        my $help_command = shift @args;
        show_help($help_command);
        exit 0;
    }
    
    # Initialize API client
    my $api_client = PVE::SMBGateway::API->new();
    
    # Initialize enhanced CLI
    my $cli = PVE::SMBGateway::CLI->new(
        api_client => $api_client,
        output_format => $json ? 'json' : 'text',
        verbose => $verbose
    );
    
    # Parse command-specific options
    my $options = {};
    parse_command_options($command, \@args, $options);
    
    # Add global options
    $options->{json} = $json;
    $options->{verbose} = $verbose;
    $options->{config} = $config_file if $config_file;
    
    # Execute command
    my $result = $cli->run_cli_command($command, \@args, $options);
    
    # Output result
    if ($json) {
        print $result . "\n";
    } else {
        print $result;
    }
    
    # Exit with appropriate code
    my $exit_code = $result =~ /"exit_code"\s*:\s*(\d+)/ ? $1 : 0;
    exit $exit_code;
}

# -------- parse command options --------
sub parse_command_options {
    my ($command, $args, $options) = @_;
    
    # Command-specific option parsing
    if ($command eq 'create') {
        GetOptionsFromArray($args,
            'mode=s' => \$options->{mode},
            'path=s' => \$options->{path},
            'quota=s' => \$options->{quota},
            'ad-domain=s' => \$options->{'ad-domain'},
            'ad-join' => \$options->{'ad-join'},
            'ad-username=s' => \$options->{'ad-username'},
            'ad-password=s' => \$options->{'ad-password'},
            'ad-ou=s' => \$options->{'ad-ou'},
            'ctdb-vip=s' => \$options->{'ctdb-vip'},
            'ha-enabled' => \$options->{'ha-enabled'},
            'vm-memory=i' => \$options->{'vm-memory'},
            'vm-cores=i' => \$options->{'vm-cores'},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'delete') {
        GetOptionsFromArray($args,
            'force' => \$options->{force},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'status') {
        GetOptionsFromArray($args,
            'json' => \$options->{json},
            'include-metrics' => \$options->{'include-metrics'},
            'include-history' => \$options->{'include-history'}
        );
    } elsif ($command eq 'batch') {
        GetOptionsFromArray($args,
            'config=s' => \$options->{config},
            'parallel=i' => \$options->{parallel},
            'dry-run' => \$options->{'dry-run'},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'ha-test') {
        GetOptionsFromArray($args,
            'vip=s' => \$options->{vip},
            'share=s' => \$options->{share},
            'target-node=s' => \$options->{'target-node'},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'ha-failover') {
        GetOptionsFromArray($args,
            'target-node=s' => \$options->{'target-node'},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'ad-test') {
        GetOptionsFromArray($args,
            'domain=s' => \$options->{domain},
            'username=s' => \$options->{username},
            'password=s' => \$options->{password},
            'ou=s' => \$options->{ou},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'metrics') {
        GetOptionsFromArray($args,
            'json' => \$options->{json}
        );
    } elsif ($command eq 'backup') {
        GetOptionsFromArray($args,
            'json' => \$options->{json}
        );
    } elsif ($command eq 'security') {
        GetOptionsFromArray($args,
            'json' => \$options->{json}
        );
    } elsif ($command eq 'logs') {
        GetOptionsFromArray($args,
            'operation-id=s' => \$options->{'operation-id'},
            'lines=i' => \$options->{lines},
            'json' => \$options->{json}
        );
    } elsif ($command eq 'cleanup') {
        GetOptionsFromArray($args,
            'json' => \$options->{json}
        );
    } else {
        # Generic option parsing for other commands
        GetOptionsFromArray($args,
            'json' => \$options->{json}
        );
    }
}

# -------- show help --------
sub show_help {
    my ($command) = @_;
    
    my $cli = PVE::SMBGateway::CLI->new();
    print $cli->generate_help_text($command);
}

# -------- run main if called directly --------
if (!caller()) {
    main();
}

__END__

=head1 NAME

pve-smbgateway-enhanced - Enhanced PVE SMB Gateway management CLI

=head1 SYNOPSIS

  pve-smbgateway-enhanced list [--json] [--filter <filter>] [--sort <field>]
  pve-smbgateway-enhanced create <sharename> [options] [--json]
  pve-smbgateway-enhanced delete <share_id> [--force] [--json]
  pve-smbgateway-enhanced status <share_id> [--json] [--include-metrics] [--include-history]
  pve-smbgateway-enhanced batch <type> [options] [--json]
  pve-smbgateway-enhanced help [<command>]

=head1 DESCRIPTION

Enhanced command-line interface for managing PVE SMB Gateway shares with structured output,
batch operations, and comprehensive command coverage.

=head1 GLOBAL OPTIONS

=over 4

=item B<--json, -j>

Output results in JSON format for machine parsing

=item B<--verbose>

Enable verbose output with detailed information

=item B<--config> <file>

Specify configuration file for batch operations

=item B<--help, -h>

Show this help message

=item B<--version, -v>

Show version information

=back

=head1 COMMANDS

=head2 list

List all SMB Gateway shares.

  pve-smbgateway-enhanced list [--json] [--filter <filter>] [--sort <field>]

=head2 create

Create a new SMB Gateway share.

  pve-smbgateway-enhanced create <sharename> [options] [--json]

Options:
  --mode <mode>              Deployment mode (lxc|native|vm) [default: lxc]
  --path <path>              Share path
  --quota <quota>            Quota limit (e.g., 10G, 1T)
  --ad-domain <domain>       Active Directory domain
  --ad-join                  Join AD domain
  --ad-username <username>   AD username
  --ad-password <password>   AD password
  --ctdb-vip <vip>           CTDB VIP address
  --ha-enabled               Enable HA
  --vm-memory <mb>           VM memory in MB [default: 2048]
  --vm-cores <cores>         VM CPU cores [default: 2]

=head2 delete

Delete an SMB Gateway share.

  pve-smbgateway-enhanced delete <share_id> [--force] [--json]

=head2 status

Get share status and information.

  pve-smbgateway-enhanced status <share_id> [--json] [--include-metrics] [--include-history]

=head2 batch

Execute batch operations.

  pve-smbgateway-enhanced batch <type> [options] [--json]

Types:
  create                     Create multiple shares from configuration
  delete                     Delete multiple shares from configuration
  status                     Get status for multiple shares

Options:
  --config <file>            Configuration file (JSON format)
  --parallel <n>             Parallel execution count [default: 1]
  --dry-run                  Show what would be done without executing

=head2 ha-status

Get HA status for a share.

  pve-smbgateway-enhanced ha-status <share_id> [--json]

=head2 ha-test

Test HA functionality.

  pve-smbgateway-enhanced ha-test --vip <vip> --share <share> [--target-node <node>] [--json]

=head2 ha-failover

Trigger HA failover.

  pve-smbgateway-enhanced ha-failover <share_id> --target-node <node> [--json]

=head2 ad-test

Test Active Directory connectivity.

  pve-smbgateway-enhanced ad-test --domain <domain> --username <username> --password <password> [--ou <ou>] [--json]

=head2 ad-status

Get AD status for a share.

  pve-smbgateway-enhanced ad-status <share_id> [--json]

=head2 metrics

Get performance metrics.

  pve-smbgateway-enhanced metrics <type> <share_id> [options] [--json]

=head2 backup

Manage backups.

  pve-smbgateway-enhanced backup <type> <share_id> [options] [--json]

=head2 security

Security operations.

  pve-smbgateway-enhanced security <type> <share_id> [options] [--json]

=head2 logs

Show operation logs.

  pve-smbgateway-enhanced logs [--operation-id <id>] [--lines <n>] [--json]

=head2 cleanup

System cleanup operations.

  pve-smbgateway-enhanced cleanup <type> [options] [--json]

=head1 EXAMPLES

=head2 List shares in JSON format

  pve-smbgateway-enhanced list --json

=head2 Create share with AD integration

  pve-smbgateway-enhanced create myshare \
    --mode lxc \
    --path /srv/smb/myshare \
    --quota 10G \
    --ad-domain example.com \
    --ad-join \
    --ad-username Administrator \
    --ad-password mypassword

=head2 Batch create shares

  pve-smbgateway-enhanced batch create \
    --config shares.json \
    --parallel 3 \
    --dry-run

=head2 Get detailed status with metrics

  pve-smbgateway-enhanced status myshare --include-metrics --include-history

=head1 CONFIGURATION FILE FORMAT

For batch operations, use a JSON configuration file:

  {
    "shares": [
      {
        "name": "share1",
        "mode": "lxc",
        "path": "/srv/smb/share1",
        "quota": "10G"
      },
      {
        "name": "share2",
        "mode": "native",
        "path": "/srv/smb/share2",
        "quota": "20G",
        "ad_domain": "example.com"
      }
    ]
  }

=head1 EXIT CODES

=over 4

=item 0

Success

=item 1

General error

=item 2

Invalid arguments

=item 3

API error

=back

=head1 AUTHOR

Eric Henderson <eric@gozippy.com>

=head1 LICENSE

Dual-licensed under AGPL-3.0 and Commercial License

=head1 SEE ALSO

pve-smbgateway(1), pve-smbgateway(5) 