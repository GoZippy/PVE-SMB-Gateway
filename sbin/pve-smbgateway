#!/usr/bin/env perl

# PVE SMB Gateway CLI Tool
# Copyright (C) 2025 Eric Henderson <eric@gozippy.com>
# Dual-licensed under AGPL-3.0 and Commercial License
#
# Command-line interface for managing SMB Gateway shares

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

# PVE API2 wrapper for SMB Gateway management
package PVE::SMBGatewayCLI;

use PVE::APIClient::LWP;
use PVE::APIClient::Credentials;

sub new {
    my ($class, %param) = @_;
    return bless \%param, $class;
}

sub api_call {
    my ($self, $method, $path, $data) = @_;
    
    my $client = PVE::APIClient::LWP->new();
    $client->set_credentials(PVE::APIClient::Credentials->new());
    
    my $url = "https://localhost:8006/api2/json$path";
    
    if ($method eq 'GET') {
        return $client->get($url);
    } elsif ($method eq 'POST') {
        return $client->post($url, $data);
    } elsif ($method eq 'DELETE') {
        return $client->delete($url);
    }
}

sub list_shares {
    my ($self) = @_;
    
    my $response = $self->api_call('GET', '/nodes/' . `hostname` . '/storage');
    chomp(my $hostname = `hostname`);
    
    my $shares = [];
    foreach my $storage (@{$response->{data}}) {
        if ($storage->{type} eq 'smbgateway') {
            push @$shares, {
                id => $storage->{storage},
                sharename => $storage->{sharename},
                mode => $storage->{mode},
                path => $storage->{path},
                status => $self->get_share_status($storage->{storage})
            };
        }
    }
    
    return $shares;
}

sub get_share_status {
    my ($self, $share_id) = @_;
    chomp(my $hostname = `hostname`);
    
    eval {
        my $response = $self->api_call('GET', "/nodes/$hostname/storage/$share_id/status");
        return $response->{data}->{status} || 'unknown';
    };
    
    return 'error';
}

sub create_share {
    my ($self, $sharename, $mode, $path, $quota, $ad_domain, $ctdb_vip) = @_;
    
    chomp(my $hostname = `hostname`);
    
    my $data = {
        storage => $sharename,
        type => 'smbgateway',
        mode => $mode || 'lxc',
        sharename => $sharename,
        path => $path || "/srv/smb/$sharename"
    };
    
    $data->{quota} = $quota if $quota;
    $data->{ad_domain} = $ad_domain if $ad_domain;
    $data->{ctdb_vip} = $ctdb_vip if $ctdb_vip;
    
    my $response = $self->api_call('POST', "/nodes/$hostname/storage", $data);
    
    return $response;
}

sub delete_share {
    my ($self, $share_id) = @_;
    
    chomp(my $hostname = `hostname`);
    
    my $response = $self->api_call('DELETE', "/nodes/$hostname/storage/$share_id");
    
    return $response;
}

# Main CLI interface
package main;

my $cli = PVE::SMBGatewayCLI->new();

my ($help, $mode, $path, $quota, $ad_domain, $ctdb_vip);
my $result = GetOptions(
    "help|h" => \$help,
    "mode=s" => \$mode,
    "path=s" => \$path,
    "quota=s" => \$quota,
    "ad-domain=s" => \$ad_domain,
    "ctdb-vip=s" => \$ctdb_vip,
);

if ($help) {
    pod2usage(1);
}

my $command = shift @ARGV;
my $share_id = shift @ARGV;

die "Usage: $0 <command> [share_id] [options]\n" unless $command;

if ($command eq 'list') {
    my $shares = $cli->list_shares();
    
    if (@$shares == 0) {
        print "No SMB Gateway shares found.\n";
        exit 0;
    }
    
    printf "%-20s %-10s %-30s %-10s\n", "Share ID", "Mode", "Path", "Status";
    print "-" x 70 . "\n";
    
    foreach my $share (@$shares) {
        printf "%-20s %-10s %-30s %-10s\n", 
            $share->{id}, 
            $share->{mode}, 
            $share->{path}, 
            $share->{status};
    }
    
} elsif ($command eq 'create') {
    die "Usage: $0 create <sharename> [options]\n" unless $share_id;
    
    print "Creating SMB Gateway share '$share_id'...\n";
    
    my $response = $cli->create_share($share_id, $mode, $path, $quota, $ad_domain, $ctdb_vip);
    
    if ($response->{success}) {
        print "Share '$share_id' created successfully.\n";
    } else {
        print "Failed to create share: " . ($response->{message} || 'Unknown error') . "\n";
        exit 1;
    }
    
} elsif ($command eq 'delete') {
    die "Usage: $0 delete <share_id>\n" unless $share_id;
    
    print "Deleting SMB Gateway share '$share_id'...\n";
    
    my $response = $cli->delete_share($share_id);
    
    if ($response->{success}) {
        print "Share '$share_id' deleted successfully.\n";
    } else {
        print "Failed to delete share: " . ($response->{message} || 'Unknown error') . "\n";
        exit 1;
    }
    
} elsif ($command eq 'status') {
    die "Usage: $0 status <share_id>\n" unless $share_id;
    
    my $status = $cli->get_share_status($share_id);
    print "Share '$share_id' status: $status\n";
    
} else {
    die "Unknown command '$command'. Use 'list', 'create', 'delete', or 'status'.\n";
}

__END__

=head1 NAME

pve-smbgateway - Proxmox VE SMB Gateway management CLI

=head1 SYNOPSIS

  pve-smbgateway list
  pve-smbgateway create <sharename> [options]
  pve-smbgateway delete <share_id>
  pve-smbgateway status <share_id>

=head1 OPTIONS

=over 4

=item B<--mode> (lxc|native|vm)

Deployment mode for the share (default: lxc)

=item B<--path> <path>

Path for the share (default: /srv/smb/<sharename>)

=item B<--quota> <size>

Quota for the share (e.g., 10G, 1T)

=item B<--ad-domain> <domain>

Active Directory domain for authentication

=item B<--ctdb-vip> <ip>

CTDB virtual IP for HA failover

=back

=head1 EXAMPLES

  # List all SMB Gateway shares
  pve-smbgateway list

  # Create a new share in LXC mode
  pve-smbgateway create myshare --mode lxc --quota 10G

  # Create a share with AD integration
  pve-smbgateway create officeshare --mode native --ad-domain example.com

  # Check share status
  pve-smbgateway status myshare

  # Delete a share
  pve-smbgateway delete myshare

=cut 